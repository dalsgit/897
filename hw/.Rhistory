cm$byClass
cv.ridge = cv.glmnet(x, y, alpha=0, type.measure="mse", family="binomial", nfolds=10,grouped=FALSE)
cv.ridge = cv.glmnet(x, y=as.factor(df.train$sp_modified), alpha=0, type.measure="mse", family="binomial", nfolds=10,grouped=FALSE)
cv.ridge = cv.glmnet(x, y=as.factor(df$sp_modified), alpha=0, type.measure="mse", family="binomial", nfolds=10,grouped=FALSE)
plot(cv.ridge)
bestlam.ridge=cv.ridge$lambda.min #find the best tuning parameter
fit.ridge =glmnet(train.mat, y=as.factor(df.train$sp_modified), family="binomial", alpha=0, lambda=grid, thresh=1e-12)
probs = predict (fit.ridge, s=bestlam.ridge, newx=test.mat)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, df.test$sp_modified)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = df.test$sp_modified)
cm$byClass
names(df.train)
model <- knncat(df.train, classcol=73)
library(sampling)
install.packages("sampling")
library(sampling)
model <- knncat(df.train, classcol=73)
library(knncat)
install.packages("knncat")
model <- knncat(df.train, classcol=73)
model <- knncat::knncat(df.train, classcol=73)
model <- knncat::knncat(df.train, classcol=73)
model <- knncat::knncat(train = df.train, test=df.test, classcol=73)
model <- knncat::knncat(train = df.train, test=df.test, classcol=73)
pred.knn <- knn(train.mat, test.mat, df.test$sp_modified, k = 1)
train.mat <- model.matrix(sp_modified~ ., data = df.train)
test.mat <- model.matrix(sp_modified~ ., data = df.test)
dim(test.mat)
dim(df.test)
dim(df.test$sp_modified)
length(df.test$sp_modified)
pred.knn <- knn(train.mat, test.mat, df.test$sp_modified, k = 1)
pred.knn <- knn(train.mat, test.mat, df.train$sp_modified, k = 1)
table(pred.knn, df.test$sp_modified)
lasso.coef=predict(fit.lasso,type="coefficients",s=bestlam.lasso)
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
names(lasso.coef[lasso.coef!=0])
train.mat <- model.matrix(sp_modified~ Overall.Qual+Exterior.1st+Foundation+Total.Bath+Overall.Cond+Exterior.2nd+Bsmt.Qual+Kitchen.Qual+tot.sqft+Neighborhood+Condition.1+Year.Remod.Add+Bsmt.Exposure+Functional+Open.Porch.SF+Lot.Shape+Condition.2+Exter.Qual+BsmtFin.Type.1+Fireplaces+Garage.Area+ln.Lot.Area, data = df.train)
test.mat <- model.matrix(sp_modified~ Overall.Qual+Exterior.1st+Foundation+Total.Bath+Overall.Cond+Exterior.2nd+Bsmt.Qual+Kitchen.Qual+tot.sqft+Neighborhood+Condition.1+Year.Remod.Add+Bsmt.Exposure+Functional+Open.Porch.SF+Lot.Shape+Condition.2+Exter.Qual+BsmtFin.Type.1+Fireplaces+Garage.Area+ln.Lot.Area, data = df.test)
pred.knn <- knn(train.mat, test.mat, df.train$sp_modified, k = 1)
table(pred.knn, df.test$sp_modified)
mean(pred.knn == df.test$sp_modified)
cm=confusionMatrix(data = pred.knn, reference = df.test$sp_modified)
cm$byClass
suppressWarnings(library(MASS))
library(class)
library(glmnet)
library(leaps)
library(caret)
library(ggplot2)
library(plyr)
library(tidyselect)
naisnone= c("Pool.QC", "Misc.Feature", "Alley", "Bsmt.Qual", "Bsmt.Cond",
"Bsmt.Exposure", "BsmtFin.Type.1", "BsmtFin.Type.2", "Fireplace.Qu",
"Garage.Type", "Garage.Finish", "Garage.Qual", "Garage.Cond", "Fence")
none= function(data, var){
levels(data[, var]) <- c(levels(data[, var]), "none")
data[, var][is.na(data[, var])] <- "none"
return(data[, var])
}
bar_missing = function(x){
library(dplyr)
library(reshape2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2)) +
geom_bar(aes(y=(..count..),fill=value),alpha=0.7,color="black")+scale_fill_manual(values=c("gold","red3"),name = "",
labels = c("Available","Missing"))+
theme_minimal()+
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Observations")+coord_flip()
}
df = read.csv("proj2_amesHousing.txt", sep = "\t", header = TRUE)
str(df)
dim(df)
dim(df)
df = df[ , -which(names(df) %in% c("Order","PID"))]
dim(df)
num = sapply(df, is.numeric)
num
fac= sapply(df, is.factor)
numdat= df [, num]
facdat= df [, fac]
bar_missing(numdat)
bar_missing(facdat)
plot(df$SalePrice, df$Gr.Liv.Area)
df <- df[df$Gr.Liv.Area<=4000,]
plot(df$SalePrice, df$Gr.Liv.Area)
dim(df)
any(is.na(df))
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
for (i in 1:length(naisnone)){
df[, naisnone[i]]<- none(df, naisnone[i])
}
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
table(df$MS.Zoning)
df$MS.Zoning<-as.character(df$MS.Zoning)
index <- which(df$MS.Zoning == "A (agr)")
df[index, 'MS.Zoning'] <- "A"
index <- which(df$MS.Zoning == "C (all)")
df[index, 'MS.Zoning'] <- "C"
index <- which(df$MS.Zoning == "I (all)")
df[index, "MS.Zoning"] <- "I"
df$MS.Zoning<-factor(df$MS.Zoning)
table(df$MS.Zoning)
ggplot(df, aes(x = df$Lot.Area, y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
ggplot(df, aes(x = log(df$Lot.Area), y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
df$ln.Lot.Area <- log(df$Lot.Area)
df = df[ , -which(names(df) %in% c("Lot.Area"))]
df = df[ , -which(names(df) %in% c("MS.SubClass"))]
dim(df)
suppressWarnings(library(MASS))
library(class)
library(glmnet)
library(leaps)
library(caret)
library(ggplot2)
library(plyr)
library(tidyselect)
naisnone= c("Pool.QC", "Misc.Feature", "Alley", "Bsmt.Qual", "Bsmt.Cond",
"Bsmt.Exposure", "BsmtFin.Type.1", "BsmtFin.Type.2", "Fireplace.Qu",
"Garage.Type", "Garage.Finish", "Garage.Qual", "Garage.Cond", "Fence")
none= function(data, var){
levels(data[, var]) <- c(levels(data[, var]), "none")
data[, var][is.na(data[, var])] <- "none"
return(data[, var])
}
bar_missing = function(x){
library(dplyr)
library(reshape2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2)) +
geom_bar(aes(y=(..count..),fill=value),alpha=0.7,color="black")+scale_fill_manual(values=c("gold","red3"),name = "",
labels = c("Available","Missing"))+
theme_minimal()+
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Observations")+coord_flip()
}
df = read.csv("proj2_amesHousing.txt", sep = "\t", header = TRUE)
str(df)
dim(df)
df = df[ , -which(names(df) %in% c("Order","PID"))]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
bar_missing(numdat)
fac= sapply(df, is.factor)
facdat= df [, fac]
bar_missing(facdat)
plot(df$SalePrice, df$Gr.Liv.Area)
df <- df[df$Gr.Liv.Area<=4000,]
plot(df$SalePrice, df$Gr.Liv.Area)
dim(df)
any(is.na(df))
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
for (i in 1:length(naisnone)){
df[, naisnone[i]]<- none(df, naisnone[i])
}
sum(is.na(df))
table(df$MS.Zoning)
df$MS.Zoning<-as.character(df$MS.Zoning)
index <- which(df$MS.Zoning == "A (agr)")
df[index, 'MS.Zoning'] <- "A"
index <- which(df$MS.Zoning == "C (all)")
df[index, 'MS.Zoning'] <- "C"
index <- which(df$MS.Zoning == "I (all)")
df[index, "MS.Zoning"] <- "I"
df$MS.Zoning<-factor(df$MS.Zoning)
table(df$MS.Zoning)
ggplot(df, aes(x = df$Lot.Area, y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
ggplot(df, aes(x = log(df$Lot.Area), y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
df$ln.Lot.Area <- log(df$Lot.Area)
df = df[ , -which(names(df) %in% c("Lot.Area"))]
df = df[ , -which(names(df) %in% c("MS.SubClass"))]
dim(df)
df$Total.Bath = df$Bsmt.Full.Bath + df$Full.Bath + (.5 * df$Bsmt.Half.Bath) + (.5 * df$Half.Bath)
summary(df$Total.Bath)
df = df[ , -which(names(df) %in% c("Bsmt.Full.Bath", "Full.Bath", "Bsmt.Half.Bath", "Half.Bath"))]
dim(df)
length(which(df$Garage.Yr.Blt == df$Year.Built)) / dim(df)[1]
table(df$Garage.Type)
df[df$Garage.Type == "none" && df$Garage.Yr.Blt < df$Year.Built, c("Garage.Yr.Blt", "Year.Built")]
idx <- which((is.na(df$Garage.Yr.Blt) & df$Garage.Type=="none"))
idx
df[idx, "Garage.Yr.Blt"] <- 0
idx <- which((is.na(df$Garage.Yr.Blt) & df$Garage.Type=="none"))
idx
df[(df$Garage.Yr.Blt < df$Year.Built && df$Garage.Type != "none"), c("Garage.Yr.Blt", "Year.Built")]
table(df$Mas.Vnr.Type)
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
count(df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")])
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
count(df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")])
df$Mas.Vnr.Type<-as.character(df$Mas.Vnr.Type)
df$Mas.Vnr.Type[df$Mas.Vnr.Type==''] = "none"
df$Mas.Vnr.Area[is.na(df$Mas.Vnr.Area)] = 0
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
table(df$Mas.Vnr.Type)
df$Mas.Vnr.Type[df$Mas.Vnr.Type=='none'] = "None"
table(df$Mas.Vnr.Type)
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
df$Mas.Vnr.Type<-factor(df$Mas.Vnr.Type)
count(df[df$Total.Bsmt.SF!=df$BsmtFin.SF.1+df$BsmtFin.SF.2+df$Bsmt.Unf.SF,c("Bsmt.Unf.SF","BsmtFin.SF.1","BsmtFin.SF.2","Total.Bsmt.SF")])
count(df[df$Total.Bsmt.SF!=df$BsmtFin.SF.1+df$BsmtFin.SF.2+df$Bsmt.Unf.SF,c("Bsmt.Unf.SF","BsmtFin.SF.1","BsmtFin.SF.2","Total.Bsmt.SF")])
df[df$Gr.Liv.Area!=df$X1st.Flr.SF+df$X2nd.Flr.SF+df$Low.Qual.Fin.SF,c("X1st.Flr.SF","X2nd.Flr.SF","Low.Qual.Fin.SF","Gr.Liv.Area")]
df$tot.sqft <- df$Total.Bsmt.SF + df$Gr.Liv.Area
df = df[ , -which(names(df) %in% c("Bsmt.Unf.SF","Gr.Liv.Area"))]
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
na.cols
na.cols = which(colSums(is.na(df)) > 0)
na.cols
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
plot(df$SalePrice, df$Lot.Frontage)
df$Lot.Frontage
490/nrow(df)
lm(SalePrice~Lot.Frontage, data=df)
lm=lm(SalePrice~Lot.Frontage, data=df)
lm
summary(lm)
summary(df$Lot.Frontage)
summary(lm)
df = df[ , -which(names(df) %in% c("Lot.Frontage"))]
sum(is.na(df))
na.rows = which(rowSums(is.na(df)) > 0)
na.rows
dim(df)
df <- df[-c(na.rows),]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
corr.matrix = cor(numdat)
table(df$Neighborhood)
table(df$Neighborhood)
lm(SalePrice ~ Neighborhood, data=df)
lm=lm(SalePrice ~ Neighborhood, data=df)
summary(lm)
table(df$Neighborhood)
df <- df[!(df$Neighborhood == "GrnHill" | df$Neighborhood == "Landmrk"),]
table(df$Neighborhood)
table(df$Utilities)
df = df[ , -which(names(df) %in% c("Utilities"))]
dim(df)
sp_modified <- rep(0, length(df$SalePrice))
sp_modified[which(df$SalePrice >= 200000)] <- 1
df = df[ , -which(names(df) %in% c("SalePrice"))]
table(sp_modified)
df <- data.frame(df, sp_modified)
dim(df)
n=nrow(df)
n
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
train.mat <- model.matrix(sp_modified~ ., data = df.train)
test.mat <- model.matrix(sp_modified~ ., data = df.test)
x
suppressWarnings(library(MASS))
library(class)
library(glmnet)
library(leaps)
library(caret)
library(ggplot2)
library(plyr)
library(tidyselect)
naisnone= c("Pool.QC", "Misc.Feature", "Alley", "Bsmt.Qual", "Bsmt.Cond",
"Bsmt.Exposure", "BsmtFin.Type.1", "BsmtFin.Type.2", "Fireplace.Qu",
"Garage.Type", "Garage.Finish", "Garage.Qual", "Garage.Cond", "Fence")
none= function(data, var){
levels(data[, var]) <- c(levels(data[, var]), "none")
data[, var][is.na(data[, var])] <- "none"
return(data[, var])
}
bar_missing = function(x){
library(dplyr)
library(reshape2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2)) +
geom_bar(aes(y=(..count..),fill=value),alpha=0.7,color="black")+scale_fill_manual(values=c("gold","red3"),name = "",
labels = c("Available","Missing"))+
theme_minimal()+
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Observations")+coord_flip()
}
df = read.csv("proj2_amesHousing.txt", sep = "\t", header = TRUE)
str(df)
dim(df)
df = df[ , -which(names(df) %in% c("Order","PID"))]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
bar_missing(numdat)
fac= sapply(df, is.factor)
facdat= df [, fac]
bar_missing(facdat)
plot(df$SalePrice, df$Gr.Liv.Area)
df <- df[df$Gr.Liv.Area<=4000,]
plot(df$SalePrice, df$Gr.Liv.Area)
dim(df)
any(is.na(df))
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
for (i in 1:length(naisnone)){
df[, naisnone[i]]<- none(df, naisnone[i])
}
sum(is.na(df))
table(df$MS.Zoning)
df$MS.Zoning<-as.character(df$MS.Zoning)
index <- which(df$MS.Zoning == "A (agr)")
df[index, 'MS.Zoning'] <- "A"
index <- which(df$MS.Zoning == "C (all)")
df[index, 'MS.Zoning'] <- "C"
index <- which(df$MS.Zoning == "I (all)")
df[index, "MS.Zoning"] <- "I"
df$MS.Zoning<-factor(df$MS.Zoning)
table(df$MS.Zoning)
ggplot(df, aes(x = df$Lot.Area, y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
ggplot(df, aes(x = log(df$Lot.Area), y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
df$ln.Lot.Area <- log(df$Lot.Area)
df = df[ , -which(names(df) %in% c("Lot.Area"))]
df = df[ , -which(names(df) %in% c("MS.SubClass"))]
dim(df)
df$Total.Bath = df$Bsmt.Full.Bath + df$Full.Bath + (.5 * df$Bsmt.Half.Bath) + (.5 * df$Half.Bath)
summary(df$Total.Bath)
df = df[ , -which(names(df) %in% c("Bsmt.Full.Bath", "Full.Bath", "Bsmt.Half.Bath", "Half.Bath"))]
dim(df)
length(which(df$Garage.Yr.Blt == df$Year.Built)) / dim(df)[1]
table(df$Garage.Type)
df[df$Garage.Type == "none" && df$Garage.Yr.Blt < df$Year.Built, c("Garage.Yr.Blt", "Year.Built")]
idx <- which((is.na(df$Garage.Yr.Blt) & df$Garage.Type=="none"))
df[idx, "Garage.Yr.Blt"] <- 0
df[(df$Garage.Yr.Blt < df$Year.Built && df$Garage.Type != "none"), c("Garage.Yr.Blt", "Year.Built")]
table(df$Mas.Vnr.Type)
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
count(df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")])
df$Mas.Vnr.Type<-as.character(df$Mas.Vnr.Type)
df$Mas.Vnr.Type[df$Mas.Vnr.Type==''] = "none"
df$Mas.Vnr.Area[is.na(df$Mas.Vnr.Area)] = 0
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
df$Mas.Vnr.Type<-factor(df$Mas.Vnr.Type)
count(df[df$Total.Bsmt.SF!=df$BsmtFin.SF.1+df$BsmtFin.SF.2+df$Bsmt.Unf.SF,c("Bsmt.Unf.SF","BsmtFin.SF.1","BsmtFin.SF.2","Total.Bsmt.SF")])
df[df$Gr.Liv.Area!=df$X1st.Flr.SF+df$X2nd.Flr.SF+df$Low.Qual.Fin.SF,c("X1st.Flr.SF","X2nd.Flr.SF","Low.Qual.Fin.SF","Gr.Liv.Area")]
df$tot.sqft <- df$Total.Bsmt.SF + df$Gr.Liv.Area
df = df[ , -which(names(df) %in% c("Bsmt.Unf.SF","Gr.Liv.Area"))]
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
490/nrow(df)
plot(df$SalePrice, df$Lot.Frontage)
df = df[ , -which(names(df) %in% c("Lot.Frontage"))]
sum(is.na(df))
na.rows = which(rowSums(is.na(df)) > 0)
df <- df[-c(na.rows),]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
corr.matrix = cor(numdat)
lm=lm(SalePrice ~ Neighborhood, data=df)
summary(lm)
table(df$Neighborhood)
df <- df[!(df$Neighborhood == "GrnHill" | df$Neighborhood == "Landmrk"),]
table(df$Neighborhood)
table(df$Utilities)
df = df[ , -which(names(df) %in% c("Utilities"))]
dim(df)
sp_modified <- rep(0, length(df$SalePrice))
sp_modified[which(df$SalePrice >= 200000)] <- 1
df = df[ , -which(names(df) %in% c("SalePrice"))]
table(sp_modified)
df <- data.frame(df, sp_modified)
dim(df)
n=nrow(df)
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
train.mat <- model.matrix(sp_modified~ ., data = df.train)
test.mat <- model.matrix(sp_modified~ ., data = df.test)
grid =10^ seq (10,-2, length =100)
cv.lasso = cv.glmnet(x, y=as.factor(df$sp_modified), family="binomial",
type.measure = "mse", nfolds=10)
x <- model.matrix(sp_modified~ ., data = df)
cv.lasso = cv.glmnet(x, y=as.factor(df$sp_modified), family="binomial",
type.measure = "mse", nfolds=10)
plot(cv.lasso)
bestlam.lasso=cv.lasso$lambda.min #find the best tuning parameter
bestlam.lasso
fit.lasso <- glmnet(train.mat, y=as.factor(df.train$sp_modified), alpha=1,
family="binomial", lambda = grid, thresh = 1e-12)
plot(fit.lasso, xvar="lambda")
probs=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, df.test$sp_modified)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = df.test$sp_modified)
cm$byClass
lasso.coef=predict(fit.lasso,type="coefficients",s=bestlam.lasso)
length(lasso.coef[lasso.coef !=0])
names(lasso.coef[lasso.coef!=0])
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
lasso.coef[lasso.coef!=0]
cv.ridge = cv.glmnet(x, y=as.factor(df$sp_modified), alpha=0, type.measure="mse",
family="binomial", nfolds=10,grouped=FALSE)
plot(cv.ridge)
bestlam.ridge=cv.ridge$lambda.min #find the best tuning parameter
bestlam.ridge
fit.ridge =glmnet(train.mat, y=as.factor(df.train$sp_modified), family="binomial",
alpha=0, lambda=grid, thresh=1e-12)
probs = predict (fit.ridge, s=bestlam.ridge, newx=test.mat)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, df.test$sp_modified)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = df.test$sp_modified)
cm$byClass
ridge.coef=predict(fit.ridge,type="coefficients",s=bestlam.ridge)
ridge.coef=ridge.coef[1:length(ridge.coef),]
length(ridge.coef[ridge.coef !=0])
names(ridge.coef[ridge.coef!=0])
names(ridge.coef[ridge.coef==0])
---
title: "Stat 897 Fall 2017 Project 1"
ridge.coef[ridge.coef==0]
ridge.coef[ridge.coef!=0]
lasso.coef=lasso.coef[1:length(lasso.coef),]
lasso.coef=predict(fit.lasso,type="coefficients",s=bestlam.lasso)
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
lasso.coef[lasso.coef!=0]
fit.knn = pred.knn = vector("list", 20)
vmse.knn = rep(NA, 20)
for (k in 1:20){ ## set k from 1 to 20
fit.knn[[k]] = knn(train.mat, test.mat, df.train$sp_modified, k = k)
pred.knn[[k]] = as.numeric(fit.knn[[k]]) - 1
vmse.knn[k] = mean(abs(df.test$sp_modified - pred.knn[[k]]))
}
plot(vmse.knn, type = 'b', col = 'red', pch = 20, xlab = 'k', ylab = 'mse of KNN')
pred.knn1 <- knn(train.mat, test.mat, df.train$sp_modified, k = 1)
table(pred.knn1, df.test$sp_modified)
table(pred.knn[1], df.test$sp_modified)
table(pred.knn[1], df.test$sp_modified)
table(pred.knn[[1]], df.test$sp_modified)
table(pred.knn[[0]], df.test$sp_modified)
table(pred.knn[[10]], df.test$sp_modified)
which.min(vmse.knn)
table(pred.knn[[which.min(vmse.knn)]], df.test$sp_modified)
mean(pred.knn[[which.min(vmse.knn)]] == df.test$sp_modified)
cm=confusionMatrix(data = pred.knn[[which.min(vmse.knn)]], reference = df.test$sp_modified)
cm$byClass
cm=confusionMatrix(data = pred.knn[[1]], reference = df.test$sp_modified)
cm$byClass
train.lasso.mat <- model.matrix(sp_modified~ Pool.QC + Sale.Type + Roof.Style + Roof.Matl + Fireplace.Qu + Alley + Overall.Qual + Exterior.1st + Foundation + Total.Bath + Overall.Cond + Exterior.2nd + Bsmt.Qual + Kitchen.Qual + tot.sqft + Neighborhood + Condition.1 + Year.Remod.Add + Bsmt.Exposure + Open.Porch.SF + Condition.2 + Exter.Qual + BsmtFin.Type.1 + Fireplaces + Garage.Area + ln.Lot.Area, data = df.train)
test.lasso.mat <- model.matrix(sp_modified~ Pool.QC + Sale.Type + Roof.Style + Roof.Matl + Fireplace.Qu + Alley + Overall.Qual + Exterior.1st + Foundation + Total.Bath + Overall.Cond + Exterior.2nd + Bsmt.Qual + Kitchen.Qual + tot.sqft + Neighborhood + Condition.1 + Year.Remod.Add + Bsmt.Exposure + Open.Porch.SF + Condition.2 + Exter.Qual + BsmtFin.Type.1 + Fireplaces + Garage.Area + ln.Lot.Area, data = df.test)
fit.knn = pred.knn = vector("list", 20)
vmse.knn = rep(NA, 20)
for (k in 1:20){ ## set k from 1 to 20
fit.knn[[k]] = knn(train.lasso.mat, test.lasso.mat, df.train$sp_modified, k = k)
pred.knn[[k]] = as.numeric(fit.knn[[k]]) - 1
vmse.knn[k] = mean(abs(df.test$sp_modified - pred.knn[[k]]))
}
plot(vmse.knn, type = 'b', col = 'red', pch = 20, xlab = 'k', ylab = 'mse of KNN')
which.min(vmse.knn)
table(pred.knn[[which.min(vmse.knn)]], df.test$sp_modified)
mean(pred.knn[[which.min(vmse.knn)]] == df.test$sp_modified)
cm=confusionMatrix(data = pred.knn[[which.min(vmse.knn)]], reference = df.test$sp_modified)
cm$byClass
fit.lda <- lda(sp_modified ~ Pool.QC + Sale.Type + Roof.Style + Roof.Matl + Fireplace.Qu + Alley + Overall.Qual + Exterior.1st + Foundation + Total.Bath + Overall.Cond + Exterior.2nd + Bsmt.Qual + Kitchen.Qual + tot.sqft + Neighborhood + Condition.1 + Year.Remod.Add + Bsmt.Exposure + Open.Porch.SF + Condition.2 + Exter.Qual + BsmtFin.Type.1 + Fireplaces + Garage.Area + ln.Lot.Area,
data = df.train, family = "binomial")
fit.lda <- lda(sp_modified ~ Pool.QC + Sale.Type + Roof.Style + Roof.Matl + Fireplace.Qu + Alley + Overall.Qual + Exterior.1st + Foundation + Total.Bath + Overall.Cond + Exterior.2nd + Bsmt.Qual + Kitchen.Qual + tot.sqft + Neighborhood + Condition.1 + Year.Remod.Add + Bsmt.Exposure + Open.Porch.SF + Condition.2 + Exter.Qual + BsmtFin.Type.1 + Fireplaces + Garage.Area + ln.Lot.Area,
data = df.train)
fit.glm <- glm(sp_modified ~ Pool.QC + Sale.Type + Roof.Style + Roof.Matl + Fireplace.Qu + Alley + Overall.Qual + Exterior.1st + Foundation + Total.Bath + Overall.Cond + Exterior.2nd + Bsmt.Qual + Kitchen.Qual + tot.sqft + Neighborhood + Condition.1 + Year.Remod.Add + Bsmt.Exposure + Open.Porch.SF + Condition.2 + Exter.Qual + BsmtFin.Type.1 + Fireplaces + Garage.Area + ln.Lot.Area,
data = df.train, family = binomial)
probs <- predict(fit.glm, Boston.test, type = "response")
probs <- predict(fit.glm, df.test, type = "response")
