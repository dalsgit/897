plot(reg.summary$adjr2, xlab ="Number of Variables",ylab="Adj R2", type = 'l', main = 'Forward Step - Performance Measure')
which.max (reg.summary$adjr2 )
points (which.max (reg.summary$adjr2 ), reg.summary$cp[which.max (reg.summary$adjr2 )], col ="red",cex =2, pch =20)
which.min (reg.summary$cp )
test.mat=model.matrix (Outstate~.,data=test)
test.val.errors =rep(NA ,17)
for(i in 1:17){
coefi=coef(regfit.fwd ,id=i)
pred=test.mat [,names(coefi)] %*% coefi
test.val.errors [i]= mean(( test$Apps-pred)^2)
}
plot(test.val.errors ,type='b', xlab='# of parameters', ylab='Test MSE')
names(coef(regfit.fwd ,id=6))
View(test)
fit.rb= lm(Outstate~poly(Room.Board ,5) ,data=train)
coefi(summary(fit.rb))
coef(summary(fit.rb))
fit.t= lm(Outstate~poly(Terminal ,5) ,data=train)
coef(summary(fit.rb))
coef(summary(fit.t))
fit.1=lm(Outstate~Room.Board, data=train)
fit.2=lm(Outstate~Room.Board+poly(Terminal,3), data=train)
anova(fit.1, fit.2)
fit.pa= lm(Outstate~poly(perc.alumni ,5) ,data=train)
coef(summary(fit.pa))
fit.e= lm(Outstate~poly(Expend ,5) ,data=train)
coef(summary(fit.e))
fit.gr= lm(Outstate~poly(Grad.Rate ,5) ,data=train)
coef(summary(fit.gr))
fit.3=lm(Outstate~Room.Board+poly(Terminal,3)+perc.alumni, data=train)
anova(fit.1, fit.2, fit.3)
fit.4=lm(Outstate~Room.Board+poly(Terminal,3)+perc.alumni+poly(Expend,3), data=train)
anova(fit.1, fit.2, fit.3, fit.4)
fit.5=lm(Outstate~Room.Board+poly(Terminal,3)+perc.alumni+poly(Expend,3)+poly(Grad.Rate,3), data=train)
anova(fit.1, fit.2, fit.3, fit.4)
anova(fit.1, fit.2, fit.3, fit.4, fit.5)
fit.1=gam(Outstate~Room.Board, data=train)
fit.1=gam(Outstate~Room.Board, data=train)
fit.2=gam(Outstate~Room.Board+poly(Terminal,3), data=train)
anova(fit.1, fit.2)
fit.3=gam(Outstate~Room.Board+poly(Terminal,3)+perc.alumni, data=train)
anova(fit.1, fit.2, fit.3)
fit.4=gam(Outstate~Room.Board+poly(Terminal,3)+perc.alumni+poly(Expend,3), data=train)
anova(fit.1, fit.2, fit.3, fit.4)
fit.5=gam(Outstate~Room.Board+poly(Terminal,3)+perc.alumni+poly(Expend,3)+poly(Grad.Rate,3), data=train)
anova(fit.1, fit.2, fit.3, fit.4, fit.5)
fit.6=gam(Outstate~Room.Board+poly(Terminal,3)+perc.alumni+poly(Expend,3)+poly(Grad.Rate,3)+PrivateYes, data=train)
fit.6=gam(Outstate~Room.Board+poly(Terminal,3)+perc.alumni+poly(Expend,3)+poly(Grad.Rate,3)+Private, data=train)
anova(fit.1, fit.2, fit.3, fit.4, fit.5, fit.6)
fit.7=gam(Outstate~Room.Board+ns(Terminal)+perc.alumni+poly(Expend,3)+poly(Grad.Rate,3)+Private, data=train)
anova(fit.6, fit.7)
anova(fit.7, fit.6)
fit.7=gam(Outstate~Room.Board+ns(Terminal)+perc.alumni+ns(Expend)+ns(Grad.Rate)+Private, data=train)
anova(fit.6, fit.7)
par(mfrow =c(3,3))
plot(fit.7, se=TRUE ,col ="blue ")
pred=predict (fit.7 ,newdata =test, se=T)
mean((test$Outstate - pred)^2)
pred
mean((test$Outstate - pred)^2)
mean((test$Outstate - pred$fit)^2)
pred=predict (fit.6 ,newdata =test, se=T)
mean((test$Outstate - pred$fit)^2)
pred=predict (fit.5 ,newdata =test, se=T)
mean((test$Outstate - pred$fit)^2)
pred=predict (fit.4 ,newdata =test, se=T)
mean((test$Outstate - pred$fit)^2)
pred=predict (fit.3,newdata =test, se=T)
mean((test$Outstate - pred$fit)^2)
pred=predict (fit.7 ,newdata =test, se=T)
mean((test$Outstate - pred$fit)^2)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
attach(Boston)
crim01 <- rep(0, length(crim))
crim01[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim01)
train <- 1:(length(crim) / 2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim01.test <- crim01[test]
fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm <- glm(crim01 ~ . - crim01 - crim - chas - nox, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.lda <- lda(crim01 ~ . - crim01 - crim, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim01.test)
mean(pred.lda$class != crim01.test)
fit.lda <- lda(crim01 ~ . - crim01 - crim - chas - nox, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim01.test)
mean(pred.lda$class != crim01.test)
train.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[test, ]
train.crim01 <- crim01[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim01, k = 1)
library(class)
library(MASS)
library(class)
attach(Boston)
crim01 <- rep(0, length(crim))
crim01[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim01)
train <- 1:(length(crim) / 2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim01.test <- crim01[test]
fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm <- glm(crim01 ~ . - crim01 - crim - chas - nox, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.lda <- lda(crim01 ~ . - crim01 - crim, data = Boston, subset = train)
library(MASS)
library(class)
attach(Boston)
crim01 <- rep(0, length(crim))
crim01[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim01)
train <- 1:(length(crim) / 2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim01.test <- crim01[test]
fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm <- glm(crim01 ~ . - crim01 - crim - chas - nox, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.lda <- lda(crim01 ~ . - crim01 - crim, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim01.test)
mean(pred.lda$class != crim01.test)
fit.lda <- lda(crim01 ~ . - crim01 - crim - chas - nox, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim01.test)
mean(pred.lda$class != crim01.test)
train.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[test, ]
train.crim01 <- crim01[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim01, k = 1)
table(pred.knn, crim01.test)
mean(pred.knn != crim01.test)
pred.knn <- knn(train.X, test.X, train.crim01, k = 10)
table(pred.knn, crim01.test)
mean(pred.knn != crim01.test)
pred.knn <- knn(train.X, test.X, train.crim01, k = 100)
table(pred.knn, crim01.test)
pred.knn <- knn(train.X, test.X, train.crim01, k = 100)
table(pred.knn, crim01.test)
mean(pred.knn != crim01.test)
data("Boston")
attach(Boston)
Boston <- subset(Boston, select=-c(crim))
library(MASS)
library(class)
data("Boston")
attach(Boston)
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim_median)
Boston <- subset(Boston, select=-c(crim))
library(MASS)
library(class)
library(glmnet)
install.packages("glmnet")
install.packages("leaps")
install.packages("leaps")
install.packages("glmnet")
knitr::opts_chunk$set(echo = TRUE)
install.packages("caret")
x = model.matrix(crim ~ . - 1, data = Boston)
library(MASS)
library(class)
library(glmnet)
library(leaps)
library(caret)
data("Boston")
attach(Boston)
x = model.matrix(crim ~ . - 1, data = Boston)
y = Boston$crim
View(x)
data(Boston)
attach(Boston)
# do some data processing to prepare the categorical variable
crim_modified <- rep(0, length(crim))
crim_modified[crim > median(crim)] <- 1
# add new column to the data frame
Boston <- data.frame(Boston, crim_modified)
View(Boston)
attach(Boston)
View(Boston)
data(Boston)
View(Boston)
data(Boston)
crim_modified <- rep(0, length(crim))
crim_modified[which(Boston$crim <= quantile(Boston$crim, 0.1))] <- 1
Boston <- data.frame(Boston, crim_modified)
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_modified.test)
conf_matrix
mean(pred.glm == crim_modified.test)
crim_modified.test
View(Boston)
data(Boston)
crim_modified[which(Boston$crim <= quantile(Boston$crim, 0.1))] <- 1
Boston <- data.frame(Boston, crim_modified)
test <- 1:(length(crim) * 0.3)
train <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
crim_modified.test
Boston.train <- Boston[train, ]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
fit.glm <- glm(crim_modified ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
fit.lda <- lda(crim_modified ~ . - crim_modified  - crim, data = Boston, subset = train)
data(Boston)
crim_modified <- rep(0, length(crim))
crim_modified[which(Boston$crim <= quantile(Boston$crim, 0.1))] <- 1
Boston <- data.frame(Boston, crim_modified)
test <- 1:(length(crim) * 0.3)
train <- (length(train)+ 1):length(crim)
test <- 1:(length(crim) * 0.3)
train <- (length(test)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_modified.test)
conf_matrix
mean(pred.glm == crim_modified.test)
sum(crim_median)
sum(crim_median.test)
sum(crim_modified.test)
sum(crim_modified)
cm=confusionMatrix(data = pred.glm$class, reference = crim_modified.test)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
install.packages("e1071")
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm$byClass
conf_matrix
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_modified.test)
conf_matrix
mean(pred.glm == crim_modified.test)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_modified.test)
conf_matrix
mean(pred.glm == crim_modified.test)
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
fit.glm <- glm(crim_modified ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_modified.test)
mean(pred.glm == crim_modified.test)
fit.glm <- glm(crim_modified ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_modified.test)
mean(pred.glm == crim_modified.test)
pred.glm <- rep(0, length(probs))
pred.glm[probs < 0.5] <- 1
table(pred.glm, crim_modified.test)
mean(pred.glm == crim_modified.test)
fit.lda <- lda(crim_modified ~ . - crim_modified  - crim, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_modified.test)
mean(pred.lda$class == crim_modified.test)
table(pred.lda$class, crim_modified.test)
fit.lda <- lda(crim_modified ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_modified.test)
mean(pred.lda$class == crim_modified.test)
fit.lda <- lda(crim_modified ~ rad + black + lstat, data = Boston, subset = train)
table(pred.lda$class, crim_modified.test)
mean(pred.lda$class == crim_modified.test)
train.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[test, ]
train.crim_modified <- crim_modified[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 1)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 100)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
train.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[test, ]
train.crim_modified <- crim_modified[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 1)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 100)
table(pred.knn, crim_modified.test)
train.X <- cbind(rad, black, lstat)[train, ]
test.X <- cbind(rad, black, lstat)[test, ]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 1)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 100)
table(pred.knn, crim_modified.test)
test <- 1:(length(crim) * 0.3)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
test <- 1:(length(crim) * 0.3)
train <- (length(test)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_modified.test <- crim_modified[test]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_modified.test)
conf_matrix
cm=confusionMatrix(data = pred.lda$class, reference = crim_modified.test)
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm$byClass
data(Boston)
crim_modified <- rep(0, length(crim))
crim_modified[which(Boston$crim <= quantile(Boston$crim, 0.1))] <- 1
Boston <- data.frame(Boston, crim_modified)
n
train = sample(seq(1:n),round(n * 0.75), replace = FALSE)
n=nrow(Boston)
train = sample(seq(1:n),round(n * 0.75), replace = FALSE)
Boston.train = Boston[ train,]
Boston.test = Boston[-train,]
test = which(Boston[-train,])
test = which(-train)
test = which(Boston[ train,])
subset(Boston, !(y %in% train))
df=subset(Boston, !(y %in% train))
train
test = setdiff(1:n, train)
train = sample(seq(1:n),round(n * 0.75), replace = FALSE)
sum(train=test)
sum(train==test)
test
train
Boston.train = Boston[ train,]
Boston.test = Boston[test,]
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
train = sample(seq(1:n),round(n * 0.75), replace = FALSE)
test = setdiff(1:n, train)
Boston.train = Boston[ train,]
crim_modified.test <- crim_modified[test]
fit.glm <- glm(crim_modified ~ . - crim_modified - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
conf_matrix = table(pred.glm, crim_modified.test)
conf_matrix
mean(pred.glm == crim_modified.test)
cm_lda=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm_lda$byClass
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm$byClass
fit.glm <- glm(crim_modified ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_modified.test)
mean(pred.glm == crim_modified.test)
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm$byClass
fit.glm <- glm(crim_modified ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
fit.glm <- glm(crim_modified ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
table(pred.glm, crim_modified.test)
mean(pred.glm == crim_modified.test)
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm$byClass
fit.lda <- lda(crim_modified ~ . - crim_modified  - crim, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_modified.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_modified.test)
cm$byClass
fit.lda <- lda(crim_modified ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_modified.test)
mean(pred.lda$class == crim_modified.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_modified.test)
cm$byClass
fit.lda <- lda(crim_modified ~ rad + black + lstat, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_modified.test)
mean(pred.lda$class == crim_modified.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_modified.test)
cm$byClass
train.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[test, ]
train.crim_modified <- crim_modified[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 1)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
table(pred.knn, crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 100)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
train.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[test, ]
train.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[train, ]
train.crim_modified <- crim_modified[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 1)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 100)
table(pred.knn, crim_modified.test)
mean(pred.knn == crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
train.X <- cbind(rad, black, lstat)[train, ]
test.X <- cbind(rad, black, lstat)[test, ]
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 1)
mean(pred.knn == crim_modified.test)
cm$byClass
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 10)
mean(pred.knn == crim_modified.test)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
pred.knn <- knn(train.X, test.X, train.crim_modified, k = 100)
cm=confusionMatrix(data = pred.knn, reference = crim_modified.test)
cm$byClass
