mean(pred.knn == crim_median.test)
# KNN: Model with parameters selected by forward selection
train.X <- cbind(rad, black, lstat)[train, ]
test.X <- cbind(rad, black, lstat)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim_median)
Boston <- subset(Boston, select=-c(crim))
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
fit.glm <- glm(crim_median ~ . - crim_median, data = Boston, family = binomial, subset = train)
library(MASS)
library(class)
library(glmnet)
library(leaps)
library(caret)
data("Boston")
attach(Boston)
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim_median)
Boston <- subset(Boston, select=-c(crim))
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
fit.glm <- glm(crim_median ~ . - crim_median, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
confusionMatrix(data = pred.glm, reference = crim_median.test)
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
fit.glm <- glm(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
fit.lda <- lda(crim_median ~ . - crim_median, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_median.test)
cm$byClass
fit.lda <- lda(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_median.test)
cm$byClass
fit.lda <- lda(crim_median ~ rad + black + lstat, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_median.test)
cm$byClass
# Logistic Regression: Model with parameters selected by lasso
fit.glm <- glm(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
# Logistic Regression: Model with parameters selected by forward selection
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
# do some data processing to prepare the categorical variable
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
# add new column to the data frame
Boston <- data.frame(Boston, crim_median)
# remove the column crim
Boston <- subset(Boston, select=-c(crim))
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
# Logistic Regression: Model with all parameters
fit.glm <- glm(crim_median ~ . - crim_median, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
library(MASS)
library(class)
library(glmnet)
library(leaps)
library(caret)
data("Boston")
attach(Boston)
# do some data processing to prepare the categorical variable
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
# add new column to the data frame
Boston <- data.frame(Boston, crim_median)
# remove the column crim
Boston <- subset(Boston, select=-c(crim))
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
# Logistic Regression: Model with all parameters
fit.glm <- glm(crim_median ~ . - crim_median, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
# Logistic Regression: Model with parameters selected by lasso
fit.glm <- glm(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
# Logistic Regression: Model with parameters selected by forward selection
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm_lr=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm_lr$byClass
mean(pred.glm == crim_median.test)
# LDA: Model with parameters selected by forward selection
fit.lda <- lda(crim_median ~ rad + black + lstat, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
cm_lda=confusionMatrix(data = pred.lda$class, reference = crim_median.test)
cm_lda$byClass
# Logistic Regression: Model with parameters selected by forward selection
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm_lr=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm_lr$byClass
mean(pred.glm == crim_median.test)
train.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
train.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
train.X <- cbind(rad, black, lstat)[train, ]
test.X <- cbind(rad, black, lstat)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
cm_lr
cm_lda
cm_lr$byClass
cm_lda$byClass
library(MASS)
library(class)
library(glmnet)
library(leaps)
library(caret)
data("Boston")
attach(Boston)
# do some data processing to prepare the categorical variable
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
# add new column to the data frame
Boston <- data.frame(Boston, crim_median)
# remove the column crim
Boston <- subset(Boston, select=-c(crim))
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
# Logistic Regression: Model with all parameters
fit.glm <- glm(crim_median ~ . - crim_median, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
# Logistic Regression: Model with parameters selected by lasso
fit.glm <- glm(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
# Logistic Regression: Model with parameters selected by forward selection
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm_lr=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm_lr$byClass
mean(pred.glm == crim_median.test)
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
library(MASS)
library(class)
library(glmnet)
library(leaps)
library(caret)
data("Boston")
attach(Boston)
Boston$crim <= quantile(Boston$crim, 0.95)
which(Boston$crim <= quantile(Boston$crim, 0.1))
which(Boston[-test])
which(Boston[-test,])
which(Boston[-c(test),])
test = which(Boston$crim <= quantile(Boston$crim, 0.1))
Boston[-c(test)]
train = which(Boston$crim > quantile(Boston$crim, 0.1))
test = which(Boston$crim <= quantile(Boston$crim, 0.1))
train = which(Boston$crim > quantile(Boston$crim, 0.1))
test = which(Boston$crim <= quantile(Boston$crim, 0.1))
train = which(Boston$crim > quantile(Boston$crim, 0.1))
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
crim_median.test <- crim_median[test]
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
pred.glm
crim_median.test
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
library(MASS)
library(class)
library(glmnet)
library(leaps)
library(caret)
data("Boston")
attach(Boston)
x = model.matrix(crim ~ . - 1, data = Boston)
y = Boston$crim
n = nrow(Boston)
p = ncol(Boston) - 1
set.seed (801)
trainingRows=sample (nrow(Boston), n*0.7, replace = FALSE)
train = Boston[trainingRows,]
test = Boston[-trainingRows,]
train.mat <- model.matrix(crim~ ., data = train)
test.mat <- model.matrix(crim~ ., data = test)
# Forward Selection | BIC
regfit.fwd=regsubsets (crim~.,data=train, nvmax =14, method='forward')
reg.summary = summary (regfit.fwd)
reg.summary
plot(reg.summary$bic, xlab ="Number of Variables",ylab="BIC", type = 'l', main = 'Forward Step - Performance Measure')
which.min (reg.summary$bic )
points (which.min (reg.summary$bic ), reg.summary$bic[which.min (reg.summary$bic )], col ="red",cex =2, pch =20)
#LASSO
grid =10^ seq (10,-2, length =100)
cv.lasso = cv.glmnet(x, y, type.measure = "mse", nfolds=10)
plot(cv.lasso)
bestlam.lasso=cv.lasso$lambda.min #find the best tuning parameter
fit.lasso <- glmnet(train.mat, train$crim, alpha = 1, lambda = grid, thresh = 1e-12)
pred.lasso=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
mean(( pred.lasso - test$crim)^2)
final.lasso=glmnet(x,y,alpha=1) #fit on the entire data set to extract coef
lasso.coef=predict(final.lasso,type="coefficients",s=bestlam.lasso)[1:14,]
lasso.coef
length(lasso.coef[lasso.coef !=0])
lasso.coef[lasso.coef!=0] #contains 11 variables in our model
#Ridge regression
cv.ridge = cv.glmnet(x, y, alpha=0, type.measure = "mse", nfolds=length(y),grouped=FALSE)
plot(cv.ridge)
bestlam.ridge=cv.ridge$lambda.min #find the best tuning parameter
fit.ridge =glmnet(train.mat, train$crim, alpha = 0, lambda = grid, thresh = 1e-12)
pred.ridge = predict (fit.ridge, s=bestlam.ridge, newx=test.mat)
mean(( pred.ridge - test$crim)^2)
final.ridge=glmnet(x,y,alpha=0) #fit on the full data
ridge.coef=predict(final.ridge,type="coefficients",s=bestlam.ridge)[1:14,]
ridge.coef
ridge.coef[ridge.coef!=0] #contains all variables in our model
# do some data processing to prepare the categorical variable
crim_median <- rep(0, length(crim))
crim_median[crim > median(crim)] <- 1
# add new column to the data frame
Boston <- data.frame(Boston, crim_median)
train <- 1:(length(crim) * 0.7)
test <- (length(train)+ 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
# Logistic Regression: Model with all parameters
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
test = which(Boston$crim <= quantile(Boston$crim, 0.1))
train = which(Boston$crim > quantile(Boston$crim, 0.1))
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
# Logistic Regression: Model with all parameters
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
cm$byClass
mean(pred.glm == crim_median.test)
test = which(Boston$crim <= quantile(Boston$crim, 0.1))
train = which(Boston$crim > quantile(Boston$crim, 0.1))
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
crim_median.test
pred.glm
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
my.accuracy <- function(df, actual, predicted){
y <- as.vector(table(df[,predicted], df[,actual]))
names(y) <- c("TN", "FP", "FN", "TP")
acur <- (y["TP"]+y["TN"])/sum(y)
return(as.numeric(acur))
}
test = which(Boston$crim <= quantile(Boston$crim, 0.1))
train = which(Boston$crim > quantile(Boston$crim, 0.1))
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim_median.test <- crim_median[test]
fit.glm <- glm(crim_median ~ . - crim_median - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, crim_median.test)
conf_matrix
mean(pred.glm == crim_median.test)
conf_matrix
conf_matrix[1,1]
conf_matrix[2,2]
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
mean(pred.glm == crim_median.test)
pred.glm
crim_median.test
fit.glm <- glm(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
cm=confusionMatrix(data = pred.glm, reference = crim_median.test)
mean(pred.glm == crim_median.test)
fit.glm <- glm(crim_median ~ rad + black + lstat, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
table(pred.glm, crim_median.test)
mean(pred.glm == crim_median.test)
fit.lda <- lda(crim_median ~ . - crim_median  - crim, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
fit.lda <- lda(crim_median ~ zn + indus + chas + nox + rm + dis + rad + ptratio + black + lstat + medv, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
cm=confusionMatrix(data = pred.lda$class, reference = crim_median.test)
fit.lda <- lda(crim_median ~ rad + black + lstat, data = Boston, subset = train)
pred.lda <- predict(fit.lda, Boston.test)
table(pred.lda$class, crim_median.test)
mean(pred.lda$class == crim_median.test)
cm_lda=confusionMatrix(data = pred.lda$class, reference = crim_median.test)
train.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
train.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[train, ]
test.X <- cbind(zn, indus, chas, nox, rm, dis, rad, ptratio, black, lstat, medv)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
train.X <- cbind(rad, black, lstat)[train, ]
test.X <- cbind(rad, black, lstat)[test, ]
train.crim_median <- crim_median[train]
set.seed(1)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 1)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 10)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
pred.knn <- knn(train.X, test.X, train.crim_median, k = 100)
table(pred.knn, crim_median.test)
mean(pred.knn == crim_median.test)
