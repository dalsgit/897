df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
df$Mas.Vnr.Type<-factor(df$Mas.Vnr.Type)
count(df[df$Total.Bsmt.SF!=df$BsmtFin.SF.1+df$BsmtFin.SF.2+df$Bsmt.Unf.SF,c("Bsmt.Unf.SF","BsmtFin.SF.1","BsmtFin.SF.2","Total.Bsmt.SF")])
df[df$Gr.Liv.Area!=df$X1st.Flr.SF+df$X2nd.Flr.SF+df$Low.Qual.Fin.SF,c("X1st.Flr.SF","X2nd.Flr.SF","Low.Qual.Fin.SF","Gr.Liv.Area")]
df$tot.sqft <- df$Total.Bsmt.SF + df$Gr.Liv.Area
df = df[ , -which(names(df) %in% c("Bsmt.Unf.SF","Gr.Liv.Area", "BsmtFin.SF.2",
"BsmtFin.SF.1", "X1st.Flr.SF", "X2nd.Flr.SF",
"Low.Qual.Fin.SF"))]
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
df = df[ , -which(names(df) %in% c("Lot.Frontage"))]
sum(is.na(df))
na.rows = which(rowSums(is.na(df)) > 0)
df <- df[-c(na.rows),]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
corr.matrix = cor(numdat)
table(df$Neighborhood)
df <- df[!(df$Neighborhood == "GrnHill" | df$Neighborhood == "Landmrk"),]
table(df$Neighborhood)
table(df$Utilities)
df = df[ , -which(names(df) %in% c("Utilities"))]
dim(df)
n=nrow(df)
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
x = model.matrix(SalePrice ~ . - 1, data = df)
y = df$SalePrice
p = ncol(df) - 1
train.mat <- model.matrix(SalePrice~ ., data = df.train)
test.mat <- model.matrix(SalePrice~ ., data = df.test)
regfit.fwd=regsubsets (SalePrice~.,data=df.train, nvmax=p, method='forward')
reg.summary = summary (regfit.fwd)
plot(reg.summary$bic, xlab ="Number of Variables",ylab="BIC", type = 'l', main = 'Forward Step - Performance Measure')
which.min (reg.summary$bic )
points (which.min (reg.summary$bic ), reg.summary$bic[which.min (reg.summary$bic )], col ="red",cex =2, pch =20)
coefi=coef(regfit.fwd ,id=which.min (reg.summary$bic ))
pred=test.mat [,names(coefi)] %*% coefi
mean(( df.test$SalePrice-pred)^2)
plot(reg.summary$cp, xlab ="Number of Variables",ylab="cp", type = 'l', main = 'Forward Step - Performance Measure')
which.min (reg.summary$cp )
points (which.min (reg.summary$cp ), reg.summary$cp[which.min (reg.summary$cp )], col ="red",cex =2, pch =20)
coefi=coef(regfit.fwd ,id=which.min (reg.summary$cp ))
pred=test.mat [,names(coefi)] %*% coefi
mean(( df.test$SalePrice-pred)^2)
regfit.bwd=regsubsets (SalePrice~.,data=df.train, nvmax=p, method='backward')
reg.summary =  summary(regfit.bwd)
plot(reg.summary$bic, xlab ="Number of Variables",ylab="BIC", type = 'l', main = 'Backward Step - Performance Measure')
which.min (reg.summary$bic )
points (which.min (reg.summary$bic ), reg.summary$bic[which.min (reg.summary$bic )], col ="red",cex =2, pch =20)
plot(reg.summary$cp, xlab ="Number of Variables",ylab="cp", type = 'l', main = 'Backward Step - Performance Measure')
which.min (reg.summary$cp )
points (which.min (reg.summary$cp), reg.summary$cp[which.min (reg.summary$cp)], col ="red",cex =2, pch =20)
grid =10^ seq (10,-2, length =100)
cv.lasso = cv.glmnet(x, y, type.measure = "mse", nfolds=10)
plot(cv.lasso)
bestlam.lasso=cv.lasso$lambda.min #find the best tuning parameter
fit.lasso <- glmnet(train.mat, df.train$SalePrice, alpha = 1, lambda = grid, thresh = 1e-12)
pred.lasso=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
mean(( pred.lasso - df.test$SalePrice)^2)
final.lasso=glmnet(x,y,alpha=1) #fit on the entire data set to extract coef
lasso.coef=predict(final.lasso,type="coefficients",s=bestlam.lasso)[1:285,]
lasso.coef=predict(final.lasso,type="coefficients",s=bestlam.lasso)
length(lasso.coef)
lasso.coef=[1:length(lasso.coef),]
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
lasso.coef[lasso.coef!=0]
names(lasso.coef[lasso.coef!=0])
names(coefi)
reg.summary
names(df)
names(lasso.coef[lasso.coef!=0])
sp_modified <- rep(0, length(df$SalePrice))
sp_modified[which(df$SalePrice >= 200000)] <- 1
table(sp_modified)
df <- data.frame(df, sp_modified)
dim(df)
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
fit.glm <- glm(sp_modified ~ Overall.Qual+Exterior.1st+Foundation+Total.Bsmt.SF+Kitchen.AbvGr+Garage.Type+Garage.Cond+Screen.Porch+Total.Bath+MS.Zoning+Land.Slope+Overall.Cond+Exterior.2nd+Bsmt.Qual+Heating+Kitchen.Qual+Paved.Drive+Pool.Area+Yr.Sold+tot.sqft+Street+Neighborhood+Year.Built+Mas.Vnr.Type+Bsmt.Cond+Heating.QC+TotRms.AbvGrd+Garage.Finish+Wood.Deck.SF+Pool.QC+Sale.Type+Condition.1+Year.Remod.Add+Mas.Vnr.Area+Bsmt.Exposure+Central.Air+Functional+Garage.Cars+Open.Porch.SF+Fence+Sale.Condition+Lot.Shape+Condition.2+Roof.Style+Exter.Qual+BsmtFin.Type.1+Electrical+Fireplaces+Garage.Area+Enclosed.Porch+Misc.Feature+Land.Contour+Bldg.Type+Roof.Matl+Exter.Cond+BsmtFin.Type.2+Bedroom.AbvGr+Fireplace.Qu+Garage.Qual+Misc.Val+ln.Lot.Area
,data = df, family = binomial, subset = train)
probs <- predict(fit.glm, df.test, type = "response")
table(df$Exterior.2nd)
sp_modified <- rep(0, length(df$SalePrice))
sp_modified[which(df$SalePrice >= 200000)] <- 1
table(sp_modified)
df <- data.frame(df, sp_modified)
dim(df)
n=nrow(df)
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
x = model.matrix(SalePrice ~ . - 1, data = df)
y = df$SalePrice
p = ncol(df) - 1
train.mat <- model.matrix(SalePrice~ ., data = df.train)
test.mat <- model.matrix(SalePrice~ ., data = df.test)
fit.lasso <- glmnet(train.mat, y=as.factor(df.train$sp_modified), alpha=1, family="binomial")
fit.lasso <- glmnet(train.mat, y=as.factor(df.train$sp_modified), alpha=1, family="binomial", lambda = grid, thresh = 1e-12)
pred.lasso=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
mean(( pred.lasso - df.test$SalePrice)^2)
plot(glmmod, xvar="lambda")
plot(fit.lasso, xvar="lambda")
cv.lasso = cv.glmnet(x, y=as.factor(df$sp_modified), family="binomial",type.measure = "mse", nfolds=10)
plot(cv.lasso)
bestlam.lasso=cv.lasso$lambda.min #find the best tuning parameter
fit.lasso <- glmnet(train.mat, y=as.factor(df.train$sp_modified), alpha=1, family="binomial", lambda = grid, thresh = 1e-12)
plot(fit.lasso, xvar="lambda")
pred.lasso=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
mean(( pred.lasso - df.test$SalePrice)^2)
final.lasso=glmnet(x,y=as.factor(df$sp_modified),alpha=1,family = "binomial") #fit on the entire data set to extract coef
lasso.coef=predict(final.lasso,type="coefficients",s=bestlam.lasso)
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
names(lasso.coef[lasso.coef!=0])
naisnone= c("Pool.QC", "Misc.Feature", "Alley", "Bsmt.Qual", "Bsmt.Cond",
"Bsmt.Exposure", "BsmtFin.Type.1", "BsmtFin.Type.2", "Fireplace.Qu",
"Garage.Type", "Garage.Finish", "Garage.Qual", "Garage.Cond", "Fence")
none= function(data, var){
levels(data[, var]) <- c(levels(data[, var]), "none")
data[, var][is.na(data[, var])] <- "none"
return(data[, var])
}
bar_missing = function(x){
library(dplyr)
library(reshape2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2)) +
geom_bar(aes(y=(..count..),fill=value),alpha=0.7,color="black")+scale_fill_manual(values=c("gold","red3"),name = "",
labels = c("Available","Missing"))+
theme_minimal()+
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Observations")+coord_flip()
}
df = read.csv("proj2_amesHousing.txt", sep = "\t", header = TRUE)
str(df)
dim(df)
plot(df$SalePrice, df$Gr.Liv.Area)
df <- df[df$Gr.Liv.Area<=4000,]
plot(df$SalePrice, df$Gr.Liv.Area)
dim(df)
df = df[ , -which(names(df) %in% c("Order","PID"))]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
bar_missing(numdat)
fac= sapply(df, is.factor)
facdat= df [, fac]
bar_missing(facdat)
any(is.na(df))
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
for (i in 1:length(naisnone)){
df[, naisnone[i]]<- none(df, naisnone[i])
}
sum(is.na(df))
table(df$MS.Zoning)
df$MS.Zoning<-as.character(df$MS.Zoning)
index <- which(df$MS.Zoning == "A (agr)")
df[index, 'MS.Zoning'] <- "A"
index <- which(df$MS.Zoning == "C (all)")
df[index, 'MS.Zoning'] <- "C"
index <- which(df$MS.Zoning == "I (all)")
df[index, "MS.Zoning"] <- "I"
df$MS.Zoning<-factor(df$MS.Zoning)
table(df$MS.Zoning)
ggplot(df, aes(x = df$Lot.Area, y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
ggplot(df, aes(x = log(df$Lot.Area), y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
df$ln.Lot.Area <- log(df$Lot.Area)
df = df[ , -which(names(df) %in% c("Lot.Area"))]
df = df[ , -which(names(df) %in% c("MS.SubClass"))]
dim(df)
df$Total.Bath = df$Bsmt.Full.Bath + df$Full.Bath + (.5 * df$Bsmt.Half.Bath) + (.5 * df$Half.Bath)
summary(df$Total.Bath)
df = df[ , -which(names(df) %in% c("Bsmt.Full.Bath", "Full.Bath", "Bsmt.Half.Bath", "Half.Bath"))]
dim(df)
length(which(df$Garage.Yr.Blt == df$Year.Built)) / dim(df)[1]
table(df$Garage.Type)
df[df$Garage.Type == "none" && df$Garage.Yr.Blt < df$Year.Built, c("Garage.Yr.Blt", "Year.Built")]
idx <- which((is.na(df$Garage.Yr.Blt) & df$Garage.Type=="none"))
df[idx, "Garage.Yr.Blt"] <- 0
idx
df[(df$Garage.Yr.Blt < df$Year.Built && df$Garage.Type != "none"), c("Garage.Yr.Blt", "Year.Built")]
table(df$Mas.Vnr.Type)
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
count(df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")])
df$Mas.Vnr.Type<-as.character(df$Mas.Vnr.Type)
df$Mas.Vnr.Type[df$Mas.Vnr.Type==''] = "none"
df$Mas.Vnr.Area[is.na(df$Mas.Vnr.Area)] = 0
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
df$Mas.Vnr.Type<-factor(df$Mas.Vnr.Type)
count(df[df$Total.Bsmt.SF!=df$BsmtFin.SF.1+df$BsmtFin.SF.2+df$Bsmt.Unf.SF,c("Bsmt.Unf.SF","BsmtFin.SF.1","BsmtFin.SF.2","Total.Bsmt.SF")])
df[df$Gr.Liv.Area!=df$X1st.Flr.SF+df$X2nd.Flr.SF+df$Low.Qual.Fin.SF,c("X1st.Flr.SF","X2nd.Flr.SF","Low.Qual.Fin.SF","Gr.Liv.Area")]
df$tot.sqft <- df$Total.Bsmt.SF + df$Gr.Liv.Area
df = df[ , -which(names(df) %in% c("Bsmt.Unf.SF","Gr.Liv.Area"))]
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
df = df[ , -which(names(df) %in% c("Lot.Frontage"))]
sum(is.na(df))
na.rows = which(rowSums(is.na(df)) > 0)
df <- df[-c(na.rows),]
na.rows
dim(df)
num = sapply(df, is.numeric)
table(df$Neighborhood)
df <- df[!(df$Neighborhood == "GrnHill" | df$Neighborhood == "Landmrk"),]
table(df$Neighborhood)
table(df$Utilities)
df = df[ , -which(names(df) %in% c("Utilities"))]
dim(df)
sp_modified <- rep(0, length(df$SalePrice))
sp_modified[which(df$SalePrice >= 200000)] <- 1
table(sp_modified)
df <- data.frame(df, sp_modified)
dim(df)
n=nrow(df)
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
x = model.matrix(SalePrice ~ . - SalePrice -sp_modified, data = df)
p = ncol(df) - 1
train.mat <- model.matrix(SalePrice~ ., data = df.train)
grid =10^ seq (10,-2, length =100)
cv.lasso = cv.glmnet(x, y=as.factor(df$sp_modified), family="binomial",type.measure = "mse", nfolds=10)
plot(cv.lasso)
bestlam.lasso=cv.lasso$lambda.min #find the best tuning parameter
fit.lasso <- glmnet(train.mat, y=as.factor(df.train$sp_modified), alpha=1, family="binomial", lambda = grid, thresh = 1e-12)
plot(fit.lasso, xvar="lambda")
pred.lasso=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
naisnone= c("Pool.QC", "Misc.Feature", "Alley", "Bsmt.Qual", "Bsmt.Cond",
"Bsmt.Exposure", "BsmtFin.Type.1", "BsmtFin.Type.2", "Fireplace.Qu",
"Garage.Type", "Garage.Finish", "Garage.Qual", "Garage.Cond", "Fence")
none= function(data, var){
levels(data[, var]) <- c(levels(data[, var]), "none")
data[, var][is.na(data[, var])] <- "none"
return(data[, var])
}
bar_missing = function(x){
library(dplyr)
library(reshape2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2)) +
geom_bar(aes(y=(..count..),fill=value),alpha=0.7,color="black")+scale_fill_manual(values=c("gold","red3"),name = "",
labels = c("Available","Missing"))+
theme_minimal()+
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Observations")+coord_flip()
}
df = read.csv("proj2_amesHousing.txt", sep = "\t", header = TRUE)
str(df)
dim(df)
df <- df[df$Gr.Liv.Area<=4000,]
df = df[ , -which(names(df) %in% c("Order","PID"))]
dim(df)
for (i in 1:length(naisnone)){
df[, naisnone[i]]<- none(df, naisnone[i])
}
sum(is.na(df))
table(df$MS.Zoning)
df$MS.Zoning<-as.character(df$MS.Zoning)
index <- which(df$MS.Zoning == "A (agr)")
df[index, 'MS.Zoning'] <- "A"
index <- which(df$MS.Zoning == "C (all)")
df[index, 'MS.Zoning'] <- "C"
index <- which(df$MS.Zoning == "I (all)")
df[index, "MS.Zoning"] <- "I"
df$MS.Zoning<-factor(df$MS.Zoning)
table(df$MS.Zoning)
df$ln.Lot.Area <- log(df$Lot.Area)
df = df[ , -which(names(df) %in% c("Lot.Area"))]
df = df[ , -which(names(df) %in% c("MS.SubClass"))]
dim(df)
df$Total.Bath = df$Bsmt.Full.Bath + df$Full.Bath + (.5 * df$Bsmt.Half.Bath) + (.5 * df$Half.Bath)
summary(df$Total.Bath)
df = df[ , -which(names(df) %in% c("Bsmt.Full.Bath", "Full.Bath", "Bsmt.Half.Bath", "Half.Bath"))]
dim(df)
length(which(df$Garage.Yr.Blt == df$Year.Built)) / dim(df)[1]
table(df$Garage.Type)
df[df$Garage.Type == "none" && df$Garage.Yr.Blt < df$Year.Built, c("Garage.Yr.Blt", "Year.Built")]
idx <- which((is.na(df$Garage.Yr.Blt) & df$Garage.Type=="none"))
df[idx, "Garage.Yr.Blt"] <- 0
df[(df$Garage.Yr.Blt < df$Year.Built && df$Garage.Type != "none"), c("Garage.Yr.Blt", "Year.Built")]
table(df$Mas.Vnr.Type)
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
count(df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")])
df$Mas.Vnr.Type[df$Mas.Vnr.Type==''] = "none"
df$Mas.Vnr.Area[is.na(df$Mas.Vnr.Area)] = 0
df$Mas.Vnr.Type<-as.character(df$Mas.Vnr.Type)
df[(is.na(df$Mas.Vnr.Type)) | (is.na(df$Mas.Vnr.Area)), c("Mas.Vnr.Type", "Mas.Vnr.Area")]
df$Mas.Vnr.Type<-factor(df$Mas.Vnr.Type)
count(df[df$Total.Bsmt.SF!=df$BsmtFin.SF.1+df$BsmtFin.SF.2+df$Bsmt.Unf.SF,c("Bsmt.Unf.SF","BsmtFin.SF.1","BsmtFin.SF.2","Total.Bsmt.SF")])
df[df$Gr.Liv.Area!=df$X1st.Flr.SF+df$X2nd.Flr.SF+df$Low.Qual.Fin.SF,c("X1st.Flr.SF","X2nd.Flr.SF","Low.Qual.Fin.SF","Gr.Liv.Area")]
df$tot.sqft <- df$Total.Bsmt.SF + df$Gr.Liv.Area
df = df[ , -which(names(df) %in% c("Bsmt.Unf.SF","Gr.Liv.Area"))]
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
df = df[ , -which(names(df) %in% c("Lot.Frontage"))]
sum(is.na(df))
na.rows = which(rowSums(is.na(df)) > 0)
df <- df[-c(na.rows),]
dim(df)
num = sapply(df, is.numeric)
numdat= df [, num]
corr.matrix = cor(numdat)
table(df$Neighborhood)
df <- df[!(df$Neighborhood == "GrnHill" | df$Neighborhood == "Landmrk"),]
table(df$Neighborhood)
table(df$Utilities)
df = df[ , -which(names(df) %in% c("Utilities"))]
dim(df)
sp_modified <- rep(0, length(df$SalePrice))
sp_modified[which(df$SalePrice >= 200000)] <- 1
df = df[ , -which(names(df) %in% c("SalePrice"))]
table(sp_modified)
df <- data.frame(df, sp_modified)
dim(df)
n=nrow(df)
set.seed(7736)
test = sample(n, round(n/4)) ## train indices are the rest
train = setdiff(1:n, test)
df.train = df[ train,]
df.test = df[test,]
x = model.matrix(sp_modified ~ ., data = df)
x
head(x)
dim(x)
p = ncol(df) - 1
train.mat <- model.matrix(df$sp_modified~ ., data = df.train)
train.mat <- model.matrix(sp_modified~ ., data = df.train)
test.mat <- model.matrix(sp_modified~ ., data = df.test)
grid =10^ seq (10,-2, length =100)
cv.lasso = cv.glmnet(x, y=as.factor(df$sp_modified), family="binomial",type.measure = "mse", nfolds=10)
plot(cv.lasso)
bestlam.lasso=cv.lasso$lambda.min #find the best tuning parameter
fit.lasso <- glmnet(train.mat, y=as.factor(df.train$sp_modified), alpha=1, family="binomial", lambda = grid, thresh = 1e-12)
plot(fit.lasso, xvar="lambda")
pred.lasso=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
mean(( pred.lasso - df.test$SalePrice)^2)
mean(( pred.lasso - df.test$sp)^2)
mean(( pred.lasso - df.test$sp_modified)^2)
pred.lasso
probs=predict (fit.lasso, s=bestlam.lasso, newx=test.mat)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, df.test$sp_modified)
conf_matrix
lasso.coef=predict(fit.lasso,type="coefficients",s=bestlam.lasso)
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
names(lasso.coef[lasso.coef!=0])
final.lasso=glmnet(x,y=as.factor(df$sp_modified),alpha=1,family = "binomial") #fit on the entire data set to extract coef
lasso.coef=predict(final.lasso,type="coefficients",s=bestlam.lasso)
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
names(lasso.coef[lasso.coef!=0])
fit.glm <- glm(sp_modified ~ ., data = df, family = binomial, subset = train)
fit.glm <- glm(sp_modified ~ ., data = df, family = "binomial", subset = train)
probs <- predict(fit.glm, df.test, type = "response")
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = crim_modified.test)
cm=confusionMatrix(data = pred.glm, reference = df.test$sp_modified)
cm$byClass
cv.ridge = cv.glmnet(x, y, alpha=0, type.measure="mse", family="binomial", nfolds=10,grouped=FALSE)
cv.ridge = cv.glmnet(x, y=as.factor(df.train$sp_modified), alpha=0, type.measure="mse", family="binomial", nfolds=10,grouped=FALSE)
cv.ridge = cv.glmnet(x, y=as.factor(df$sp_modified), alpha=0, type.measure="mse", family="binomial", nfolds=10,grouped=FALSE)
plot(cv.ridge)
bestlam.ridge=cv.ridge$lambda.min #find the best tuning parameter
fit.ridge =glmnet(train.mat, y=as.factor(df.train$sp_modified), family="binomial", alpha=0, lambda=grid, thresh=1e-12)
probs = predict (fit.ridge, s=bestlam.ridge, newx=test.mat)
pred.glm <- rep(0, length(probs))
pred.glm[probs > 0.5] <- 1
conf_matrix = table(pred.glm, df.test$sp_modified)
conf_matrix
cm=confusionMatrix(data = pred.glm, reference = df.test$sp_modified)
cm$byClass
names(df.train)
model <- knncat(df.train, classcol=73)
library(sampling)
install.packages("sampling")
library(sampling)
model <- knncat(df.train, classcol=73)
library(knncat)
install.packages("knncat")
model <- knncat(df.train, classcol=73)
model <- knncat::knncat(df.train, classcol=73)
model <- knncat::knncat(df.train, classcol=73)
model <- knncat::knncat(train = df.train, test=df.test, classcol=73)
model <- knncat::knncat(train = df.train, test=df.test, classcol=73)
pred.knn <- knn(train.mat, test.mat, df.test$sp_modified, k = 1)
train.mat <- model.matrix(sp_modified~ ., data = df.train)
test.mat <- model.matrix(sp_modified~ ., data = df.test)
dim(test.mat)
dim(df.test)
dim(df.test$sp_modified)
length(df.test$sp_modified)
pred.knn <- knn(train.mat, test.mat, df.test$sp_modified, k = 1)
pred.knn <- knn(train.mat, test.mat, df.train$sp_modified, k = 1)
table(pred.knn, df.test$sp_modified)
lasso.coef=predict(fit.lasso,type="coefficients",s=bestlam.lasso)
lasso.coef=lasso.coef[1:length(lasso.coef),]
length(lasso.coef[lasso.coef !=0])
names(lasso.coef[lasso.coef!=0])
train.mat <- model.matrix(sp_modified~ Overall.Qual+Exterior.1st+Foundation+Total.Bath+Overall.Cond+Exterior.2nd+Bsmt.Qual+Kitchen.Qual+tot.sqft+Neighborhood+Condition.1+Year.Remod.Add+Bsmt.Exposure+Functional+Open.Porch.SF+Lot.Shape+Condition.2+Exter.Qual+BsmtFin.Type.1+Fireplaces+Garage.Area+ln.Lot.Area, data = df.train)
test.mat <- model.matrix(sp_modified~ Overall.Qual+Exterior.1st+Foundation+Total.Bath+Overall.Cond+Exterior.2nd+Bsmt.Qual+Kitchen.Qual+tot.sqft+Neighborhood+Condition.1+Year.Remod.Add+Bsmt.Exposure+Functional+Open.Porch.SF+Lot.Shape+Condition.2+Exter.Qual+BsmtFin.Type.1+Fireplaces+Garage.Area+ln.Lot.Area, data = df.test)
pred.knn <- knn(train.mat, test.mat, df.train$sp_modified, k = 1)
table(pred.knn, df.test$sp_modified)
mean(pred.knn == df.test$sp_modified)
cm=confusionMatrix(data = pred.knn, reference = df.test$sp_modified)
cm$byClass
suppressWarnings(library(MASS))
library(class)
library(glmnet)
library(leaps)
library(caret)
library(ggplot2)
library(plyr)
library(tidyselect)
naisnone= c("Pool.QC", "Misc.Feature", "Alley", "Bsmt.Qual", "Bsmt.Cond",
"Bsmt.Exposure", "BsmtFin.Type.1", "BsmtFin.Type.2", "Fireplace.Qu",
"Garage.Type", "Garage.Finish", "Garage.Qual", "Garage.Cond", "Fence")
none= function(data, var){
levels(data[, var]) <- c(levels(data[, var]), "none")
data[, var][is.na(data[, var])] <- "none"
return(data[, var])
}
bar_missing = function(x){
library(dplyr)
library(reshape2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2)) +
geom_bar(aes(y=(..count..),fill=value),alpha=0.7,color="black")+scale_fill_manual(values=c("gold","red3"),name = "",
labels = c("Available","Missing"))+
theme_minimal()+
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Observations")+coord_flip()
}
df = read.csv("proj2_amesHousing.txt", sep = "\t", header = TRUE)
str(df)
dim(df)
dim(df)
df = df[ , -which(names(df) %in% c("Order","PID"))]
dim(df)
num = sapply(df, is.numeric)
num
fac= sapply(df, is.factor)
numdat= df [, num]
facdat= df [, fac]
bar_missing(numdat)
bar_missing(facdat)
plot(df$SalePrice, df$Gr.Liv.Area)
df <- df[df$Gr.Liv.Area<=4000,]
plot(df$SalePrice, df$Gr.Liv.Area)
dim(df)
any(is.na(df))
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
for (i in 1:length(naisnone)){
df[, naisnone[i]]<- none(df, naisnone[i])
}
sum(is.na(df))
na.cols = which(colSums(is.na(df)) > 0)
sort(colSums(sapply(df[na.cols], is.na)), decreasing = TRUE)
table(df$MS.Zoning)
df$MS.Zoning<-as.character(df$MS.Zoning)
index <- which(df$MS.Zoning == "A (agr)")
df[index, 'MS.Zoning'] <- "A"
index <- which(df$MS.Zoning == "C (all)")
df[index, 'MS.Zoning'] <- "C"
index <- which(df$MS.Zoning == "I (all)")
df[index, "MS.Zoning"] <- "I"
df$MS.Zoning<-factor(df$MS.Zoning)
table(df$MS.Zoning)
ggplot(df, aes(x = df$Lot.Area, y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
ggplot(df, aes(x = log(df$Lot.Area), y = df$SalePrice)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "lm")
df$ln.Lot.Area <- log(df$Lot.Area)
df = df[ , -which(names(df) %in% c("Lot.Area"))]
df = df[ , -which(names(df) %in% c("MS.SubClass"))]
dim(df)
